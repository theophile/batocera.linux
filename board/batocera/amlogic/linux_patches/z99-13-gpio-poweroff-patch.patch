From be72a30cc15f26764b7edc98cabf9d75ca609b74 Mon Sep 17 00:00:00 2001
From: Phil Elwell <phil@raspberrypi.org>
Date: Thu, 25 Jun 2015 12:16:11 +0100
Subject: [PATCH 1/3] gpio-poweroff: Allow it to work on Radxa Zero

The Radxa Zero firmware manages the power-down and reboot
process. To do this it installs a pm_power_off handler, causing
the gpio-poweroff module to abort the probe function.

This patch introduces a "force" DT property that overrides that
behaviour, and also adds a DT overlay to enable and control it.

Note that running in an active-low configuration (DT parameter
"active_low") requires a custom dt-blob.bin and probably won't
allow a reboot without switching off, so an external inversion
of the trigger signal may be preferable.
---
 drivers/power/reset/gpio-poweroff.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/drivers/power/reset/gpio-poweroff.c b/drivers/power/reset/gpio-poweroff.c
index 1c5af2fef1423..3e670131f2a81 100644
--- a/drivers/power/reset/gpio-poweroff.c
+++ b/drivers/power/reset/gpio-poweroff.c
@@ -50,9 +50,11 @@ static int gpio_poweroff_probe(struct platform_device *pdev)
 {
 	bool input = false;
 	enum gpiod_flags flags;
+	bool force = false;
 
 	/* If a pm_power_off function has already been added, leave it alone */
-	if (pm_power_off != NULL) {
+	force = of_property_read_bool(pdev->dev.of_node, "force");
+	if (!force && (pm_power_off != NULL)) {
 		dev_err(&pdev->dev,
 			"%s: pm_power_off function already registered\n",
 		       __func__);

From f90215bb39b9830bc28a6464b3e45135ee551cad Mon Sep 17 00:00:00 2001
From: Phil Elwell <phil@raspberrypi.com>
Date: Tue, 27 Apr 2021 08:59:01 +0100
Subject: [PATCH 2/3] gpio-poweroff: Remember the old poweroff handler

Keeping a copy of the old poweroff handler allows it to be restored
should this module be unloaded, but also provides a fallback if the
power hasn't been removed when the timeout elapses.

See: https://github.com/raspberrypi/rpi-eeprom/issues/330

Signed-off-by: Phil Elwell <phil@raspberrypi.com>
---
 drivers/power/reset/gpio-poweroff.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/drivers/power/reset/gpio-poweroff.c b/drivers/power/reset/gpio-poweroff.c
index 3e670131f2a81..d05ddc58bd092 100644
--- a/drivers/power/reset/gpio-poweroff.c
+++ b/drivers/power/reset/gpio-poweroff.c
@@ -24,6 +24,7 @@ static struct gpio_desc *reset_gpio;
 static u32 timeout = DEFAULT_TIMEOUT_MS;
 static u32 active_delay = 100;
 static u32 inactive_delay = 100;
+static void (*old_power_off)(void);
 
 static void gpio_poweroff_do_poweroff(void)
 {
@@ -43,6 +44,9 @@ static void gpio_poweroff_do_poweroff(void)
 	/* give it some time */
 	mdelay(timeout);
 
+	if (old_power_off)
+		old_power_off();
+
 	WARN_ON(1);
 }
 
@@ -76,6 +80,13 @@ static int gpio_poweroff_probe(struct platform_device *pdev)
 	if (IS_ERR(reset_gpio))
 		return PTR_ERR(reset_gpio);
 
+	export = of_property_read_bool(pdev->dev.of_node, "export");
+	if (export) {
+		gpiod_export(reset_gpio, false);
+		gpiod_export_link(&pdev->dev, "poweroff-gpio", reset_gpio);
+	}
+
+	old_power_off = pm_power_off;
 	pm_power_off = &gpio_poweroff_do_poweroff;
 	return 0;
 }
@@ -83,7 +94,7 @@ static int gpio_poweroff_probe(struct platform_device *pdev)
 static int gpio_poweroff_remove(struct platform_device *pdev)
 {
 	if (pm_power_off == &gpio_poweroff_do_poweroff)
-		pm_power_off = NULL;
+		pm_power_off = old_power_off;
 
 	return 0;
 }

From 220921403124ba633fa9a1544ce897bdca6f56a4 Mon Sep 17 00:00:00 2001
From: theophile <chmeredith@gmail.com>
Date: Wed, 5 Oct 2022 18:52:23 -0500
Subject: [PATCH 3/3] Add example gpio-poweroff overlay

---
 arch/arm64/boot/dts/amlogic/overlay/Makefile  |  3 ++-
 .../overlay/meson-g12a-gpio-poweroff.dts      | 24 +++++++++++++++++++
 2 files changed, 26 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm64/boot/dts/amlogic/overlay/meson-g12a-gpio-poweroff.dts

diff --git a/arch/arm64/boot/dts/amlogic/overlay/Makefile b/arch/arm64/boot/dts/amlogic/overlay/Makefile
index 3448b41cfd40a..45e47631ec9dd 100644
--- a/arch/arm64/boot/dts/amlogic/overlay/Makefile
+++ b/arch/arm64/boot/dts/amlogic/overlay/Makefile
@@ -11,7 +11,8 @@ dtbo-$(CONFIG_ARCH_MESON) += \
 	meson-g12a-uart-ao-b-on-gpioao-2-gpioao-3.dtbo \
 	meson-g12a-uart-ao-b-on-gpioao-8-gpioao-9.dtbo \
	meson-g12a-uart-ee-c.dtbo \
-	meson-g12a-w1-gpioao-3.dtbo
+	meson-g12a-w1-gpioao-3.dtbo \
+	meson-g12a-gpio-poweroff.dtbo
 
 scr-$(CONFIG_ARCH_MESON) += \
 	meson-fixup.scr
diff --git a/arch/arm64/boot/dts/amlogic/overlay/meson-g12a-gpio-poweroff.dts b/arch/arm64/boot/dts/amlogic/overlay/meson-g12a-gpio-poweroff.dts
new file mode 100644
index 0000000000000..8c7a1a1151c7e
--- /dev/null
+++ b/arch/arm64/boot/dts/amlogic/overlay/meson-g12a-gpio-poweroff.dts
@@ -0,0 +1,24 @@
+/dts-v1/;
+/plugin/;
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/gpio/meson-g12a-gpio.h>
+
+/ {
+        compatible = "radxa,zero", "amlogic,g12a";
+
+        fragment@0 {
+                target-path = "/";
+                __overlay__ {
+			gpio-poweroff {
+		                compatible = "gpio-poweroff";
+                                /* Sets poweroff pin to GPIOAO_9 as an example. Modify as needed. */
+                                gpios = <&gpio_ao GPIOAO_9 GPIO_ACTIVE_LOW>;
+		                timeout-ms = <20000>;
+				force;
+		        };
+		};
+	};
+};
+
+
